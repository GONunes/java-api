name: CD
on:
  push:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  CD:
    runs-on: ubuntu-latest

    steps:
    
      #- name: Configure SSH AZURE
        #run: |
          #mkdir -p ~/.ssh/
          #echo "$SSH_KEY" > ~/.ssh/azure-cloud.key
          #chmod 600 ~/.ssh/azure-cloud.key
          #cat >>~/.ssh/config <<END
          #Host azure-cloud
            #HostName $SSH_HOST
            #User $SSH_USER
            #IdentityFile ~/.ssh/azure-cloud.key
            #StrictHostKeyChecking no
          #END
        #env:
          #SSH_USER: ${{ secrets.AZURE_SSH_USER }}
          #SSH_KEY: ${{ secrets.AZURE_SSH_KEY }}
          #SSH_HOST: ${{ secrets.AZURE_SSH_HOST_PROD }}
    
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
          cache: maven
          
      - name: Run tests and generate Jacoco report
        run: |
          mvn -B -f pom.xml test jacoco:prepare-agent jacoco:report

      #- name: SonarCloud Analyze
        #env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          #SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        #run: |
         #mvn -B verify sonar:sonar \
         #-Dsonar.host.url=https://sonarcloud.io \
         #-Dsonar.organization=guilherme-nunes \
         #-Dsonar.projectKey=GONunes_java-api \
         #-Dsonar.language=java \
         #-Dsonar.java.coveragePlugin=jacoco \
         #-Dmaven.test.skip=true
          
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots -DskipTests package
          
      #- name: Deploy de application
        #run: |
          #ssh azure-cloud "sudo systemctl stop prod-app"
          #ssh azure-cloud "sudo rm -rf /prod/java-app"
          #scp target/java-api.jar azure-cloud:/home/github/java-app
          #ssh azure-cloud "sudo mv /home/github/java-app /prod/java-app"
          #ssh azure-cloud "sudo systemctl start prod-app"
          
          
      - name: Deploy Docker
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          docker build . -t $DOCKER_USER/java-api:latest
          docker push $DOCKER_USER/java-api:latest
